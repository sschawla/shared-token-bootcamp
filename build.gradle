buildscript {
    Properties constants = new Properties()
    file("$projectDir/./constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()
    }

    apply from: "${rootProject.projectDir}/repositories.gradle"
    apply plugin: 'java'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://jitpack.io' }
        maven { url 'https://software.r3.com/artifactory/corda-releases' }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    }

    dependencies {
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

apply plugin: 'java'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'


dependencies {
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-jackson:$corda_release_version"
    cordaCompile "$corda_release_group:corda-rpc:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    testCompileClasspath fileTree(dir: 'lib/dependencies', include: '*.jar')
    testCompile "$corda_release_group:corda-node-driver:$corda_release_version"
    testCompile "$corda_release_group:corda-test-utils:$corda_release_version"
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-parameters" // Required for shell commands.
}

sourceSets {
    main{
        java {
            srcDir 'src/main/java'
            java.outputDir = file('bin/main')
        }
    }
    test{
        java {
            srcDir 'src/test/java'
            java.outputDir = file('bin/test')
        }
    }
}

cordapp {
    targetPlatformVersion 5
    minimumPlatformVersion 5
    contract {
        name "Bootcamp Contracts"
        vendor "R3"
        licence "A liberal, open source licence"
        versionId 1
    }

    workflow {
        name "Bootcamp Flows"
        vendor "R3"
        licence "A really expensive proprietary licence"
        versionId 1
    }
}


task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    // Java version check
    if (JavaVersion.current() != JavaVersion.VERSION_1_8){
        throw new GradleException("This build must be run with java 8")
    }

    nodeDefaults {
        projectCordapp { deploy = true }
        rpcUsers = [[user: "user1", password: "test", permissions: ["ALL"]]]
    }

    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10001
        cordapps = []
        rpcSettings {
            address("localhost:10011")
            adminAddress("localhost:10021")
        }
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10002
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10022")
        }
    }
    node {
        name "O=PartyB,L=New York,C=US"
        p2pPort 10003
        rpcSettings {
            address("localhost:10013")
            adminAddress("localhost:10023")
        }
    }
    node {
        name "O=PartyC,L=Lagos,C=NG"
        p2pPort 10004
        rpcSettings {
            address("localhost:10014")
            adminAddress("localhost:10024")
        }
    }
}
